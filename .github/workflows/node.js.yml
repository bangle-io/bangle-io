# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [dev, staging, production]
  pull_request:
    branches: [dev, staging, production]

jobs:
  prepare-yarn-cache:
    name: Prepare Cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js latest
        uses: actions/setup-node@v2-beta
        with:
          node-version: '*'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: 'Verify Yarn cache (fix w/ "yarn install")'
        if: "github.actor != 'kepta'"
        run: |
          yarn install --immutable --immutable-cache --check-cache --mode=skip-build
      - name: 'Check Yarn cache (fix w/ "yarn install")'
        if: "github.actor == 'kepta'"
        run: |
          yarn install --immutable --immutable-cache --mode=skip-build

  yarn-validate:
    name: Validate Yarn dependencies and constraints
    needs: prepare-yarn-cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js latest
        uses: actions/setup-node@v2-beta
        with:
          node-version: '*'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: 'Check for unmet constraints (fix w/ "yarn constraints --fix")'
        run: |
          yarn constraints
      - name: 'Check for duplicate dependencies (fix w/ "yarn dedupe")'
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          yarn dedupe --check

  tests:
    runs-on: ubuntu-latest
    needs: prepare-yarn-cache
    strategy:
      matrix:
        test-kind: ['lint', 'test-ci', 'g:e2e']
    steps:
      - uses: actions/checkout@v2
      - name: Run test "${{ matrix.test-kind }}"
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - run: yarn install
      - run: yarn ${{ matrix.test-kind }}
      - name: Upload coverage report
        if: matrix.test-kind == 'test-ci'
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          flags: unittests # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)

  build-bangle-io:
    runs-on: ubuntu-latest
    needs: prepare-yarn-cache
    steps:
      - uses: actions/checkout@v2
      - name: Build
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - run: yarn install
      - run: yarn build
